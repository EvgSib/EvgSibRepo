# -*- coding: utf-8 -*-
'''
БЫЛО
Вы разрабатываете программное обеспечение для школьной библиотеки, составленное персонализированным списком для чтения.
Реализуйте класс library, содержащий метод compile_list, возвращающий список для чтения, соответствующий интересам ученика.
Если в библиотеке не оказалось подходящих для ученика книг, не включайте его в список.

Формат ввода:
Две строки.
Первая строка в формате:
<имя ученика>:<область_1>,<область_2>,...,<область_N>...;<имя ученика>:<область_1>,<область_2>,...
Вторая строка в формате:
<название книги>:<область>;<название книги>:<область>-...
Каждая строка содержит от 1 до 10 записей. Каждая книга уникальна и относится к одной области.
Имена учеников и названия книг уникальны (от 3 до 20 символов), области - нет. Строки гарантированно корректны.

Формат вывода:
Строка формата «<Имя ученика>:<название книги>, <название книги>...;<имя ученика>:<название книги>, <название книги>
Для каждого ученика» выведите все книги, соответствующие его области интересов.
Список учеников должен быть отсортирован в том же порядке, что и входные данные.
Если не нашлось ни одной подходящей книги, выведите строку 'Список пуст'.

Пример 1 (тест):
Входные данные:
Алексей:Философия;Наталья:Литература,Научная фантастика
Страх и трепет:Философия;Задача трёх тел:Научная фантастика;Война и мир:Литература

Выходные данные:
Алексей:Страх и трепет;Наталья:Задача трёх тел,Война и мир

Пример 2 (тест):
Входные данные:
Кирилл:История;Анна:Научная литература,Физика
История России:История;Научные открытия:Научная литература;Квантовая физика:Физика

Выходные данные:
Кирилл:История России;Анна:Научные открытия,Квантовая физика

Пример 3 (тест):
Входные данные:
Светлана:Химия;Игорь:Математика,Физика
Химия для чайников:Химия;Математика для всех:Математика;Квантовая механика:Физика

Выходные данные:
Светлана:Химия для чайников;Игорь:Математика для всех,Квантовая механика

Пример 4 (тест):
Входные данные:
Виктор:Литература;Екатерина:Научная фантастика,История
Сказки:Литература;Задача трёх тел:Научная фантастика;История государства российского:История

Выходные данные:
Виктор:Сказки;Екатерина:Задача трёх тел,История государства российского

Пример 5 (тест):
Входные данные:
София:История;Дмитрий:Математика,Физика;Екатерина:Химия
Квантовая механика:Физика;Занимтельная геохимия:Химия;Методы теории функции комплексного переменного:Математика

Выходные данные:
Дмитрий:Квантовая механика,Методы теории функции комплексного переменного;Екатерина:Занимтельная геохимия

Пример 6 (из задания):
Входные данные:
Анна:Научная фантастика,Математика;Иван:История,Документальная литература
Преступление и наказание:Художественная литература;Задача трёх тел:Научная фантастика;История государства Российского:История

Выходные данные:
Анна:Задача трёх тел;Иван:История государства Российского

Пример 7 (из задания):
Входные данные:
Софья:История;Дмитрий:Математика,Физика;Екатерина:Химия
Квартовая механика:Физика;Занимательная геохимия:Химия;Методы теории функции комплексного переменного:Математика

Выходные данные:
Дмитрий:Квартовая механика, Методы теории функции комплексного переменного;Екатерина:Занимательная геохимия

Пример 8 (из задания):
Входные данные:
Софья:История;Дмитрий:Математика
Квантовая механика:Физика

Выходные данные:
Список пуст
'''

# class Student:
#     def __init__(self,name,interests):
#         self.name = name
#         self.interests = interests.split(',')


# class Library:
#     def __init__(self):
#         "Ваш код"


#     def compile_list(self,student):
#         "Ваш код"

# student_data = input()
# book_data = input()
# school_library = library(book_data)
# print(school_library.compile_list())


class Student:
    def __init__(self,name,interests):
        self.name = name
        self.interests = interests.split(',')

class Library:
    def __init__(self, book_data):
        self.book_data = book_data
    def compile_list(self):
        name1, interests1 = student_data.split(':')
        st = Student(name1, interests1) #создаем экземпляр класса Student
        list_book = self.book_data.split('-')
        dict_book = {}
        for i in list_book:
            list_spl = i.split(':')
            dict_book[list_spl[1]] = list_spl[0]
        list_books_int = [dict_book[item] for item in dict_book.keys() if item in st.interests]
        if list_books_int:
            result = st.name + ' - ' + ', '.join(list_books_int)
        else:
            result = 'Список пуст'
        return result

student_data = input('Введите <имя ученика>:<область_1>,<область_2>,...,<область_N>: ')
book_data = input('Введите <название книги>:<область>-<название книги>:<область>-...: ')
school_library = Library(book_data)
print(school_library.compile_list())

#решение реализованное с помощью одной функции
# '''<имя ученика>:<область_1>,<область_2>,...,<область_N>'''
# student_data = 'Софья:Философия,Научная литература,Искусство,География,Математика'
# '''<название книги>:<область>-<название книги>:<область>-...'''
# book_data = 'Основы теории функций комплексного переменного:Математика-Теория струн:Научная литература-Загадка трех тел:Научная фантастика-Война и мир:Классика-Илиада:Древняя литература-Одиссея:Древняя литература'
#     def compile_list(student_data, book_data):
#         name, list_interests = student_data.split(':')
#         list_book = book_data.split('-')
#         dict_book = {}
#         for i in list_book:
#             list_spl = i.split(':')
#             dict_book[list_spl[1]] = list_spl[0]
#         list_books_int = [dict_book[item] for item in dict_book.keys() if item in list_interests]
#         if list_books_int:
#             result = name + ' - ' + ', '.join(list_books_int)
#         else:
#             result = name + ' - ' + 'Список пуст'

#         return print(result)





