# -*- coding: utf-8 -*-
"""
Описание:
Вы разрабатываете компонент для цифровой архивной платформы, которая обрабатывает исторические документы.
В базе данных хранятся даты, годы и другие числовые значения, записанные римскими цифрами -
как это часто встречается в исторических документах, рукописях и надписях.
Для анализа этих данных, сортировки и построения временных шкал необходимо преобразовывать римские числа в десятичные.
Ваша задача - реализовать функцию, которая выполняет такую конвертацию.
Римские числа - непозиционная система записи чисел со следующими правилами.
1. Если меньшее число стоит перед большим, они вычитаются:
IV римская = 410
2. Если большее число стоит перед меньшим. они складываются:
VI римская = 610
3. Из числа не может вычитаться больше, чем разница между предыдущим меньшим числом и им самим, например:
IVX - некорректная запись.

Формат ввода:
Строка, состоящая из латинских символов, соотвествующим римским цифрам, гарантированно являющаяся корректным числом.

Формат вывода:
Строка, содержащая то же число, но записанное десятичными цифрами.

Пример 1 (тест):
Входные данные:
MCMXCIV

Выходные данные:
1994

Пример 2 (тест):
Входные данные:
XLII

Выходные данные:
42

Пример 3 (тест):
Входные данные:
CDXLIV

Выходные данные:
444

Пример 4 (тест):
Входные данные:
MMXX

Выходные данные:
2020

Пример 5 (тест):
Входные данные:
DCCCXLV

Выходные данные:
845

Пример 6 (тест):
Входные данные:
CCLXXXI

Выходные данные:
281

Пример 7 (из задания):
Входные данные:
MCMXXCIV

Выходные данные:
1984

Пример 8 (из задания):
Входные данные:
MCCXXXIV

Выходные данные:
1234
"""


def roman_to_decimal(roman_number: str) -> str:
    roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    lst = [roman_numerals[i] for i in roman_number]
    out, last_item = 0, 0
    for cursor in range(len(lst) - 1, -1, -1):
        if lst[cursor] >= last_item:
            out = out + lst[cursor]
            last_item = lst[cursor]
        else:
            out = out - lst[cursor]
    return out

roman_number = input()
decimal_number = roman_to_decimal(roman_number)
print(decimal_number)

# очень элегантное решение

# def roman_to_decimal(roman_numeral):
#     roman_numerals = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
#     out, mx = 0, 0
#     for cur in map(lambda c: roman_numerals[c], roman_numeral[::-1]):
#         if cur >= mx:
#             out = out + cur
#             mx = cur
#         else:
#             out = out - cur
#     return out









