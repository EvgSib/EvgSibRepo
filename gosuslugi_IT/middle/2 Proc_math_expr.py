# -*- coding: utf-8 -*-
"""
Описание:
Вы разрабатываете модуль, обрабатывающий текст, который содержит математические выражения.
Ваша задача - вычислить значения всех содержащихся в тексте выражений и округлить
все числа до вещественных чисел формата +-Х...Х.ХХ (вещественное число, округлённое
до сотых в ближайшую сторону).

Формат ввода:
Строка, содержащая произвольный текст, числа (положительные вещественные с произвольным
числом знаков после точки или положительные целые) и математические операторы '+', '-', '*', '/'.
Все содержащиеся в тексте выражения гарантированно имеют формат (без кавычек):
«<число><оператор><число».
Знаки операторов гарантированно не встречаются вне математических выражений,
строка имеет длину от 5 до 30 символов и может содержать или не содержать математические выражения.


Формат вывода:
Та же строка, но с преобразованием выражений и чисел в требуемый формат
(числа формата X или Х.Х нужно привести к виду Х.00 и Х.ХО).
При этом структура и формат текста вне математических выражений должны оставаться неизменными.
Если строка не содержит выражений и чисел, вернуть её неизменной.

Пример 1 (тест):
Входные данные:
Умножение 7*8 и деление 16/4

Выходные данные:
Умножение 56.00 и деление 4.00

Пример 2 (тест):
Входные данные:
0.5+0.5=1.0

Выходные данные:
1.00=1.00

Пример 3 (тест):
Входные данные:
Смешанный текст 3.14*2 и 1.5/0.5

Выходные данные:
Смешанный текст 6.28 и 3.00

Пример 4 (тест):
Входные данные:
10-5.5 и 2.75+3.25

Выходные данные:
4.50 и 6.00

Пример 5 (тест):
Входные данные:
Сложение 0.1+0.2 и 0.3-0.1

Выходные данные:
Сложение 0.30 и 0.20

Пример 6 (тест):
Входные данные:
10.123 + 5.876 = 15.999

Выходные данные:
16.00=16.00

Пример 7 (из задания):
Входные данные:
10+0.01 равно 10.01, 0.127 округляется до 0.13

Выходные данные:
10.01 равно 10.01, 0.13 округляется до 0.13

Пример 8 (из задания):
Входные данные:
10.4/2 0.13-2

Выходные данные:
5.20 -1.87

Пример 9 (из задания):
Входные данные:
Текст без выражений

Выходные данные:
Текст без выражений
"""

import re

def simplify(string: str) -> str:
    regex = re.compile(r'\d*\.?\d* ?[+|*|\-|/] ?\d*\.?\d*')
    list_exp = re.findall(regex, string)
    if list_exp:
        lst_middle = [str(float(eval(item))) for item in list_exp]
        dict_middle = dict(zip(list_exp, lst_middle))
        str_middle = re.sub(regex, lambda x: dict_middle[x.group()], string)
        list_res = re.findall(r'\d+\.*\d*', str_middle)
        lst_result = ['{:.2f}'.format(round(float(item), 2)) for item in list_res]
        dict_result = dict(zip(list_res, lst_result))
        str_result = re.sub(r'\d+\.*\d*', lambda x: dict_result[x.group()], str_middle)
        return str_result
    else:
        return 'Текст без выражений'


text = 'Сложение 0.1 + 0.2 и 0.3 - 0.1'
print(simplify(text))




