# -*- coding: utf-8 -*-
"""
Описание:
Для мастерской, изготавливающей деревянную посуду, необходимо разработать программное обеспечение,
оцевающее сроки выполнения заказов. Мастерская работает по плавающему графику.
Заказы, которые не хватает времени выполнить, полностью переносятся на следующий день.
В графике гарантированно хватает времени для выполнения всех заказов. Заказы выполняются последовательно,
начиная с первого, одновременно обрабатывается только один заказ.

Формат ввода:
Две строки
Первая - график работы. Список дней, каждый в формате <часы_открытия>, <часы_закрытия> (в часах, от 6 до 22),
разделенный точкой с запятой.
Вторая - список заказов, каждый в формате <количество_изделий>, <время_на_одно_изделие>
(количество 0<x<=10, время в минутах, 1<=x<=60).
Заказы разделены точкой с запятой.

Формат вывода:
Строка в формате D1,D2,D3..Dn, где Di - число дней, прошедших с момента начала работы над списком
заказов до завершения i-го заказа.

Пример 1 (тест):
Входные данные:
10,14;11,15;12,16
1,90;2,60;3,30

Выходные данные:
0,0,1

Пример 2 (тест):
Входные данные:
8,16;9,15;10,14
4,75;2,100;1,80

Выходные данные:
0,1,1

Пример 3 (тест):
Входные данные:
6,10;7,12;8,14
3,40;2,60;1,45

Выходные данные:
0,0,1

Пример 4 (тест):
Входные данные:
8,18;9,19;10,20
3,100;2,100;10,100

Выходные данные:
0,0,2

Пример 5 (из задания):
Входные данные:
9,11;10,10;7,14
1,60;5,30;10,10;2,32

Выходные данные:
0,2,2,2

Пример 6 (из задания):
Входные данные:
10,15;11,13;10,15
8,30;5,35;2,40

Выходные данные:
0,1,2
"""


def schedule(timetable: str, orders: str) -> str:
    timetable_spl = timetable.split(';')
    time_work = []  #time_work = [240, 240, 240]
    for time in timetable_spl:
        lst_time = time.split(',')
        time_work.append((int(lst_time[1]) - int(lst_time[0]))*60)
    orders_spl = orders.split(';')
    time_orders = []  #time_orders = [90, 120, 90]
    for order in orders_spl:
        ord_spl = order.split(',')
        time_orders.append(int(ord_spl[0])*int(ord_spl[1]))
    result = []
#     time_work = [240, 300, 360]
#     time_orders = [120, 120, 45]
    j, k = 0, 0
    for i in range(0, len(time_orders)):
        if i == 0:
            remaining_time = time_work[i] - time_orders[i]
        while remaining_time < 0:
            j += 1
            remaining_time = remaining_time + time_work[j]
        if remaining_time >= 0:
            k += 1
            if k > len(time_orders) - 1:
                k = k -1
            remaining_time = remaining_time - time_orders[k]
            result.append(j)
    result = [str(i) for i in result]
    return ','.join(result)

timetable = input()
orders = input()
dates = schedule(timetable, orders)
print(dates)
