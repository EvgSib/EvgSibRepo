# -*- coding: utf-8 -*-
'''
Описание:
В математическом программном обеспечении требуется реализовать функционал отображения
матриц произвольного размера.

Формат ввода:
Строка разделенных запятыми чисел, в которой первые два места - числа строк и столбцов в матрице,
остальные - числа матрицы построчно. Строка гарантированно содержит нужное количество чисел.

Формат вывода:
Строка, содержащая числа матрицы, где числа в пределах строки разделены пробелами,
а строки между собой - символами новой строки (округлить числа до тысячных).

Пример 1 (тест):
Входные данные:
2,4,1.11111,2.22222,3.33333,4.44444,5.55555,6.66666,7.77777,8.88888

Выходные данные:
1.111 2.222 3.333 4.444
5.556 6.667 7.778 8.889

Пример 2 (тест):
Входные данные:
4,1,10,20,30,40

Выходные данные:
10.0
20.0
30.0
40.0

Пример 3 (тест):
Входные данные:
1,5,1.234,2.345,3.456,4.567,5.678

Выходные данные:
1.234 2.345 3.456 4.567 5.678

Пример 4 (тест):
Входные данные:
2,2,9.99999,8.88888,7.77777,6.66666

Выходные данные:
10.0 8.889
7.778 6.667

Пример 5 (тест:
Входные данные:
3,2,0.1,0.2,0.3,0.4,0.5,0.6

Выходные данные:
0.1 0.2
0.3 0.4
0.5 0.6

Пример 6 (из задания):
Входные данные:
2,4,1.1349,2.6876,3.99999,4.5678,5.8712,6.00001,7.19231,8.123012

Выходные данные:
1.135 2.688 4.0 4.568
5.871 6.0 7.192 8.123

Пример 7 (из задания):
Входные данные:
2,2,2,1.55555,1.66666,2

Выходные данные:
2.0 1.556
1.667 2.0
'''

def format_matrix(matrix_string: str) -> str:
    ms_spl = matrix_string.split(',')
    row, column, numbers = ms_spl[0], ms_spl[1], ms_spl[2:]
    numbers = [round(float(num), 3) for num in numbers]
    numbers = ['{}'.format(i) for i in numbers]
    chunks = [numbers[i:i + int(column)] for i in range(0, len(numbers), int(column))] #chunks (перевод - куски)
    for item in chunks:
        print(' '.join(item))


matrix_string = input()
formatted_matrix = format_matrix(matrix_string)
formatted_matrix





