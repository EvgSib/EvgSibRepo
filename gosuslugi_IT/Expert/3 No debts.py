# -*- coding: utf-8 -*-
'''
Без задолженностей
Вы работаете над модулем «Электронная зачетка» в системе для администрирования учебного процесса регионального вуза.
Каждый студент может быть записан на несколько курсов, по каждому курсу у него есть итоговый балл.
Необходимо написать программу для учебного офиса, которая будет выбирать из базы тех студентов,
которые не имеют ни одной академической задолженности. Студент без единой академической задолженности — студент,
набравший строго выше проходного балла по всем курсам. Проходной балл определяется для каждого курса отдельно.

Формат ввода
Первая строка содержит информацию о студентах, курсах и их оценках в формате:
«‎‎имя_студента,курс,оценка;имя_студента,курс,оценка;...».
В строке есть информация хотя бы об одном студенте.
Вторая строка содержит проходные баллы по предметам в формате:
«‎‎курс,проходной_балл;курс,проходной_балл;;...».
Гарантируется, что на все указанные в первой строке курсы есть проходной балл.
Все баллы являются целыми положительными числами, а все имена студентов уникальны.

Формат вывода
Имена студентов без академической задолженности, каждое имя с новой строки.
Если таких студентов нет, выводится слово «Пусто» (без кавычек).


Пример 1 (тест):
Входные данные:
Анна,Математика,85;Анна,Химия,90;Борис,Математика,75;Борис,История,80;Евгений,Математика,95;Евгений,История,85
Математика,80;Химия,60;История,80

Выходные данные:
Анна
Евгений

Пример 2 (тест):
Входные данные:
Анна,Психология,8;Анна,Литература,9;Борис,Обществознание,8
Психология,8;Литература,6;Обществознание,8

Выходные данные:
Пусто

Пример 3 (тест):
Входные данные:
Анна,Математика,85;Анна,Химия,90;Борис,Математика,75;Борис,История,80;Евгений,Математика,95;Евгений,История,85
Математика,80;Химия,60;История,80

Выходные данные:
Анна
Евгений

Пример 4 (тест):
Входные данные:
Анна,Математика,75;Анна,Химия,70;Борис,Математика,75;Борис,История,80;Евгений,Математика,50;Евгений,История,75
Математика,80;Химия,90;История,90

Выходные данные:
Пусто

Пример 5 (тест):
Входные данные:
Анна,Психология,8;Анна,Литература,9;Борис,Обществознание,8
Психология,8;Литература,6;Обществознание,8

Выходные данные:
Пусто
'''

class Student:
    def __init__(self, name):
        self.name = name
        self.courses = {}  # {'Математика': 80, 'Химия': 60, 'История': 80}

    def passing_grades(self):
        '''
        Функция которая приводит словарь self.courses к виду
        {'Математика': 80, 'Химия': 60, 'История': 80}
        '''
        for item in scores_info.split(';'):
            course, score = item.split(',')
            self.courses[course] = int(score)

    def student_verification(self, data):
        '''
        Функция которая проверяет, что один студент не имеет ни одной
        академической задолженности. Возвращает имя студента, если нет задолженности
        '''
        true_lst = []
        for user_name, grades in data.items():
            if self.name == user_name and self.name in data:
                for subject, score in grades.items():
                    if score > self.courses[subject]:
                        true_lst.append(True)
                    else:
                        true_lst.append(False)
        if all(true_lst):
            return self.name


class CourseManager:
    def __init__(self):
        self.students = {}

    def student_data(self):
        '''
        Функция которая из входные данные students_info преобразует в словарь вида
        {'Анна': {'Математика': 85, 'Химия': 90},
        'Борис': {'Математика': 75, 'История': 80},
        'Евгений': {'Математика': 95, 'История': 85}}
        '''
        for item in students_info.split(';'):
            name, course, grade = item.split(',')
            if name not in self.students:
                self.students[name] = {}
            self.students[name][course] = int(grade)

students_info = input()
scores_info = input()

c = CourseManager()
c.student_data()
data = c.students
result = []
for name_st in data.keys():
    st = Student(name_st)
    st.passing_grades()
    item_def = st.student_verification(data)
    if item_def:
        result.append(item_def)

if not result:
    print("Пусто")
else:
    print("\n".join(sorted(result)))


